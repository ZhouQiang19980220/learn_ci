# 工作流的名称
name: Python CI with Tests

# 触发条件
on: 
  push:
    # 当代码推送到main分支时触发
    branches: [main]
  pull_request:
    # 当有PR 到 main分支时触发
    branches: [main]

# job 定义
jobs:
  # 定义一个ID为say-hello的job
  build-and-test:
    name: Build, Test and Lint
    runs-on: ubuntu-latest  # 运行环境
    # 在多个python版本上测试
    strategy:
      fail-fast: false # 重要：如果一个Python版本的job失败，不取消其他版本的job
      matrix:
        python-version: ['3.10', '3.11']  # 定义Python版本矩阵

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

    # 设置Python环境
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # 使用矩阵中的Python版本
          cache: 'pip'  # 启用pip缓存

    # 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # 升级pip
          pip install -r requirements.txt  # 安装依赖

    # 运行black: 代码格式化
      - name: Run black for code formatting
        run: |
          black --check . # 检查代码格式是否符合black规范

    # 运行ruff: 代码质量检查
      - name: Run ruff for code quality
        run: |
          ruff check .  # 检查代码质量

    # 测试覆盖率
      - name: Run coverage with pytest
        run: |
          pytest --cov=module --cov-report=xml --cov-report=term-missing tests/  # 执行tests目录下的单元测试，并生成覆盖率报告